/*
 * Copyright 2025-2025 Seth Falco and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.io.FileType

plugins {
    id "checkstyle"
    id "me.champeau.jmh" version "0.7.3"
}

group = "fun.falco.microbenchmarks"
version = "1.0.0"
description = "Benchmarks I've written during development both professionally and during Open Source contributions."

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:5.12.2")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

test {
    useJUnitPlatform()

    reports {
        html.enabled = false
    }
}

jmh {
    includes = [
        getBenchmarkName()
    ]
    iterations = 1
    benchmarkMode = ["avgt"]
    fork = 1
    failOnError = true
    timeUnit = "ns"
    warmupIterations = 2
}

def getBenchmarkName() {
    if (!project.gradle.startParameter.taskNames.contains("jmh")) {
        return;
    }

    if (!project.hasProperty("benchmark")) {
        def namespace = project.group.replace('.', File.separator);
        def path = [
            project.rootDir.toString(),
            "src",
            "jmh",
            "java",
            namespace,
        ];
        def dir = new File(String.join(File.separator, path));
        def benchmarks = [];

        dir.eachFileRecurse (FileType.FILES) {
            filePath -> benchmarks << filePath.name.replace("Benchmark.java", "");
        }

        throw new GradleException("Must specify one of the following benchmarks to run:\n\n* " + String.join("\n* ", benchmarks) + "\n\nFor example: ./gradlew clean jmh -P benchmark=" + benchmarks[0]);
    }

    return project.property("benchmark");
}
